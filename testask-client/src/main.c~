/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-  */
/*
 * main.c
 * Copyright (C) 2019 ?????????????????? ???????????? ???????????????????? <abrakadabra21099@gmail.com>
 * 
 * testask-client is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * testask-client is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <common.h>
#include <netdb.h>
#include <string.h>
#include <errno.h>
#include <stdbool.h>
#include <arpa/inet.h>
#include <time.h>
/*
int broadcast_send(const struct SINGLE_MSG msg){
	
	int sock = get_sock();
	int broadcast = 1;
	if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcast, 
	               sizeof broadcast) == -1) {
		perror("broadcast");
		exit(1);
	}
	struct sockaddr_in addr;

    addr.sin_family = AF_INET;
    addr.sin_port = htons(SERVER_LISTEN_PORT);
    addr.sin_addr.s_addr = htonl(SERVER_ADDRESS);
    int res = sendto(sock, (void *) &msg, sizeof(msg.head) + msg.head.MSG_SIZE, 
                     0, (struct sockaddr *)&addr, sizeof(addr));
	if (res < 0) printf("Error: %d", errno); else printf("Send %d bytes.", res);
	close(sock);

	return res;
};*/

FILE *get_sentfile(const char *file_to_sent) {
	FILE *sentfile = fopen(file_to_sent, "r");;  	
	if (sentfile == NULL) {
		fprintf(stderr, "failed to open file_to_sent: %s\n", file_to_sent);
		exit(1);
	};
	return sentfile;
}


bool sent_ten_packets(FILE *sentfile, const int sock, 
//                              const struct sockaddr_in *nfo,
                              const char *server_ip_addr,
                              const bool need_skip) {

	struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(SERVER_LISTEN_PORT);
//    addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	if (inet_pton(AF_INET, server_ip_addr, (void *)&addr.sin_addr) != 1) {
        perror("server_ip_addr");
        exit(1);
    };

	bool is_skipped = false;
	int ret, r_size;
	short int max_id = 0, 
	// random skip random packet if need
		skip_id = rand() % TEN_SERIES_MSG_COUNT;
	struct SINGLE_MSG msg[TEN_SERIES_MSG_COUNT];
	for (short int i=0; i < TEN_SERIES_MSG_COUNT; i++){
		msg[i].head.MSG_ID = i;
		r_size = fread(msg[i].MSG_BODY, sizeof(unsigned char), 
	               SINGLE_MSG_BODY_SIZE, sentfile);
		msg[i].head.MSG_SIZE = r_size;
		msg[i].head.MSG_OPERATION = 2 * (r_size != SINGLE_MSG_BODY_SIZE);
		max_id = i;
		if ( need_skip && ( (i == skip_id) || 
		                    ((msg[i].head.MSG_OPERATION == 2) || (! is_skipped))) 
		   ) {
			is_skipped = true;
			printf("\t - Skip msg id: %d\n", i);			
		} else {
			ret = sent_one_packet (sock, addr, &msg[i], 
			                       sizeof(struct SINGLE_MSG_HEAD) + r_size);
			printf("Send msg id: %d, bytes read\\sent: %d\\%d\n", i, r_size, 
			       ret);
		};

		
		if (r_size != SINGLE_MSG_BODY_SIZE)
			break;
	};
	
	printf("Max msg id for this ten series: %d\n", max_id);
/*	Recive request for skiped or lost packets. */
	struct SINGLE_MSG confirm;
	do { 
		if (recv_one_packet(sock, &addr, &confirm, sizeof confirm) == 0) 
			continue; 
		if (confirm.head.MSG_OPERATION == 1) {
		    if (confirm.head.MSG_ID < TEN_SERIES_MSG_COUNT) {
				msg[confirm.head.MSG_ID].head.MSG_OPERATION = 2;
				printf("* > Request for packed with msg id %d recived\n", 
				       confirm.head.MSG_ID);
				sent_one_packet(sock, addr, &msg[confirm.head.MSG_ID], 
			                       sizeof(struct SINGLE_MSG_HEAD) + 
			                msg[confirm.head.MSG_ID].head.MSG_SIZE);
				printf("* < Sent requested packed with msg id %d\n", 
				       confirm.head.MSG_ID);
			
			} else { 
				printf("* Incorrect request recived, drop it.\n");
			}
		}
	} while (confirm.head.MSG_OPERATION == 2);
	printf("* > Ten packets confirmation received with id: %d, oper: %d, size: %d\n",
		       confirm.head.MSG_ID, confirm.head.MSG_OPERATION, 
		       confirm.head.MSG_SIZE);
	return (r_size == SINGLE_MSG_BODY_SIZE);
}

int main(int argc, char *argv[]) {
	if (argc != 4) {
		fprintf(stderr, "Usage: testask-client server_ip_addr \
file_to_sent max_skip_packet_count\n%d", argc);
		exit(1);
	};
	int sock = get_sock();
	FILE *sentfile = get_sentfile(argv[2]);	

	bool need_skip;
	unsigned long max_skip_packet_count = strtod(argv[3], NULL);
	unsigned long skip_packet_count = 0, ten_packet_count = 0;
	srand( time(NULL) );
	do {
		ten_packet_count++;
		need_skip = ( skip_packet_count < max_skip_packet_count ) 
			&& ( rand() % 2 ) ;
		if (need_skip) skip_packet_count++;
	} while (sent_ten_packets(sentfile, sock, argv[1], need_skip));

	printf("*** Sent FINISH! Ten packet count: %ld, artificially skipped packet count: %ld\n",
	       ten_packet_count, skip_packet_count);
	fclose(sentfile);
	close(sock);
	return (0);
}

